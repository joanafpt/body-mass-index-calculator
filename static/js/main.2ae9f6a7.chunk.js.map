{"version":3,"sources":["services/imcService.js","components/ResultExplanation.js","components/ImcCalculator.js","components/AuthorTag.js","App.js","serviceWorker.js","index.js"],"names":["imcService","imcQualitativeEvaluation","result","includes","replace","console","log","imcCalculator","h","w","_result","toFixed","ResultExplanation","id","this","props","resultExplanation","Component","ImcCalculator","state","height","weight","displayedResult","onChange","bind","onSubmit","event","setState","target","name","value","preventDefault","res","resultForDisplay","resToDisplay","class","type","step","min","max","placeholder","className","Author","href","rel","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8VAqDeA,EAVI,CACXC,yBA1C2B,SAACC,GAK5B,OAFGA,EAAOC,SAAS,MAAMD,EAAOE,QAAQ,IAAK,KAC7CC,QAAQC,IAAIJ,EAAQ,gBACjBA,GAAU,KACC,sBAELA,EAAS,MAAQA,EAAS,GACrB,uBAENA,GAAU,IAAMA,EAAS,KACnB,0BAENA,GAAU,IAAMA,EAAS,GACnB,qBAENA,GAAU,IAAMA,EAAS,GACnB,kBAENA,GAAU,IAAMA,EAAS,GACnB,uBAENA,EAAS,GACH,sBADT,GAoBLK,cAbgB,SAACC,EAAGC,GACpB,IAAIC,EAMJ,OALAL,QAAQC,WAAWE,SAAUC,GAG7BC,GADAA,EAAUD,GADWD,EAAIA,IAEPG,QAAQ,GAC1BN,QAAQC,IAAII,EAAS,4BACdA,ICrBAE,G,uLAdP,OACI,6BACK,yBAAKC,GAAG,WACPC,KAAKC,MAAMb,OADZ,IACoB,6BACnBY,KAAKC,MAAMC,kBAFZ,IAE+B,mC,GANhBC,cC8FjBC,G,kBA1FX,WAAYH,GAAQ,IAAD,8BACf,4CAAMA,KACDI,MAAQ,CACTC,OAAQ,GACRC,OAAQ,GACRC,gBAAiB,MAErB,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBAChB,EAAKC,SAAW,EAAKA,SAASD,KAAd,gBARD,E,sEAWVE,GAELZ,KAAKa,SAAL,eACKD,EAAME,OAAOC,KAAOH,EAAME,OAAOE,U,+BAIjCJ,GACLA,EAAMK,iBAKN,IAAMC,EAAMhC,EAAWO,cAAcO,KAAKK,MAAMC,OAAQN,KAAKK,MAAME,QAC7DY,EAAmBjC,EAAWC,yBAAyB+B,GAE7DlB,KAAKa,SAAS,CACVL,gBAAiBU,EACjBE,aAAcD,M,+BAMlB,OACI,6BACI,0BAAME,MAAM,4BAA4BV,SAAUX,KAAKW,UACnD,6BACI,0CAAsB,6BACtB,2BAAOI,KAAK,SACRO,KAAK,SACLC,KAAK,OACLC,IAAI,IACJC,IAAI,OACJ1B,GAAG,IACH2B,YAAY,sCACZV,MAAOhB,KAAKK,MAAMC,OAClBG,SAAUT,KAAKS,YAGvB,6BACI,wCAAoB,6BACpB,2BAAOM,KAAK,SACRO,KAAK,SACLC,KAAK,OACLC,IAAI,IACJC,IAAI,MACJ1B,GAAG,IACH2B,YAAY,kCAEZjB,SAAUT,KAAKS,SACfO,MAAOhB,KAAKK,MAAME,UAE1B,6BAEA,yBAAKoB,UAAU,wBACX,yBAAKN,MAAM,UACP,4BAAQM,UAAU,mBACdL,KAAK,SACLvB,GAAG,iBAFP,aAFR,MASJ,kBAAC,EAAD,CACIX,OAAQY,KAAKK,MAAMG,gBACnBN,kBAAmBF,KAAKK,MAAMe,eAElC,mC,GAhFYjB,cCabyB,G,uLAbP,OAEI,uBAAGC,KAAK,8BACRf,OAAO,SACPgB,IAAI,uBAFJ,+B,GAJS3B,c,MCiBN4B,MAdf,WACE,OACE,yBAAKJ,UAAU,OACb,4BAAQA,UAAU,cAChB,2EACA,kHACA,kBAAC,EAAD,OAEC,kBAAC,EAAD,QCFWK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2ae9f6a7.chunk.js","sourcesContent":["  /* FUNCOES UTILIZADAS NO PROGRAMA, EXPORTADAS P ONDE SAO USADAS*/\r\n  \r\n  const imcQualitativeEvaluation = (result) => {\r\n        // eslint-disable-next-line\r\n        let text = '';\r\n        if(result.includes(',')){result.replace(',', '.');}\r\n        console.log(result, ' qualitative');\r\n        if(result <= 18.5) {\r\n        return text = \"Peso corporal baixo\";\r\n        \r\n        }else if(result > 18.5 && result < 25){\r\n        return text = \"Peso corporal normal\";\r\n        }\r\n        else if(result >= 25 && result < 29.9){\r\n        return text = \"Peso corporal excessivo\";\r\n        }\r\n        else if(result >= 30 && result < 35){\r\n        return text = \"Obesidade moderada\";\r\n        }\r\n        else if(result >= 35 && result < 40){\r\n        return text = \"Obesidade grave\";\r\n        }\r\n        else if(result >= 40 && result < 50){\r\n        return text = \"Obesidade mórbida\";\r\n        }\r\n        else if(result > 50){\r\n        return text = \"Superobesidade\";\r\n        }\r\n              \r\n        }\r\n  \r\n\r\n  const imcCalculator = (h, w) => {\r\n        let _result;\r\n        console.log(typeof h, typeof w);\r\n        const squareHeight = h * h;\r\n        _result = w / squareHeight;\r\n        _result = _result.toFixed(1);\r\n        console.log(_result, ' result no imcCalculator');\r\n        return _result;\r\n  }\r\n\r\n\r\nconst imcService = {\r\n        imcQualitativeEvaluation: imcQualitativeEvaluation, \r\n        imcCalculator: imcCalculator,\r\n        \r\n}\r\n\r\n\r\n\r\n\r\n\r\nexport default imcService;","import React, { Component } from 'react';\r\nimport './ResultExplanation.css'\r\nclass ResultExplanation extends Component {\r\n      render() {\r\n        return (\r\n            <div>\r\n                 <div id=\"display\">  \r\n                 {this.props.result} <br/>\r\n                 {this.props.resultExplanation} <br/>\r\n                 </div>\r\n                \r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ResultExplanation;\r\n","import React, { Component } from 'react';\r\nimport imcService from '../services/imcService';\r\nimport ResultExplanation from './ResultExplanation';\r\nimport './ImcCalculator.css'\r\n\r\nclass ImcCalculator extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            height: '',\r\n            weight: '',\r\n            displayedResult: null\r\n        }\r\n        this.onChange = this.onChange.bind(this);\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n    }\r\n\r\n    onChange(event) {\r\n        //grab the name using e.target\r\n        this.setState({\r\n            [event.target.name]: event.target.value //atribuir ao e target name o value do input do user\r\n\r\n        });\r\n    }\r\n    onSubmit(event) {\r\n        event.preventDefault();\r\n        //  imcService.ImcCalculator(this.state.height, this.state.weight);\r\n\r\n        //para o resultado da ImcCalculator() estar disponivel aqui, tem de se guardado:\r\n\r\n        const res = imcService.imcCalculator(this.state.height, this.state.weight);\r\n        const resultForDisplay = imcService.imcQualitativeEvaluation(res);\r\n\r\n        this.setState({\r\n            displayedResult: res,\r\n            resToDisplay: resultForDisplay\r\n        });\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form class=\"form-horizontal inputForm\" onSubmit={this.onSubmit} >\r\n                    <div>\r\n                        <label>Altura:</label><br />\r\n                        <input name=\"height\"\r\n                            type=\"number\"\r\n                            step=\"0.01\"\r\n                            min='0'\r\n                            max='2.50'\r\n                            id=\"h\"\r\n                            placeholder=\"Insira a sua altura aqui. Ex.: 1,70\"\r\n                            value={this.state.height}\r\n                            onChange={this.onChange} />\r\n                        {  /*  <br />   */}\r\n                    </div>\r\n                    <div>\r\n                        <label>Peso:</label><br />\r\n                        <input name=\"weight\"\r\n                            type=\"number\"\r\n                            step=\"0.01\"\r\n                            min='0'\r\n                            max='300'\r\n                            id=\"w\"\r\n                            placeholder=\"Insira o seu peso aqui. Ex.: 60\"\r\n                            //atençao q aqui tem de coincidir o nome do input com o state (weight, neste caso. estava body e por isso n dava p escrever no form)\r\n                            onChange={this.onChange}\r\n                            value={this.state.weight} />\r\n                    </div>\r\n                    <br />\r\n\r\n                    <div className=\"form-row text-center\">\r\n                        <div class=\"col-12\">\r\n                            <button className='btn btn-default '\r\n                                type=\"submit\"\r\n                                id=\"submit-weight\">Submeter</button>\r\n                        </div> </div>\r\n                </form>\r\n\r\n\r\n                <ResultExplanation\r\n                    result={this.state.displayedResult}\r\n                    resultExplanation={this.state.resToDisplay}\r\n                />\r\n                <div>\r\n                </div>\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default ImcCalculator;","import React, { Component } from 'react';\r\nimport './AuthorTag.css';\r\n\r\nclass Author extends Component {\r\n    render() {\r\n        return (\r\n\r\n            <a href=\"https://github.com/joanafpt\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\">Joana Teixeira @ github\r\n           </a>      \r\n           \r\n        )\r\n\r\n    }\r\n\r\n}\r\n\r\nexport default Author;","import React, {/* Component*/ } from 'react';\nimport './App.css';\nimport ImcCalculator from './components/ImcCalculator';\nimport Author from './components/AuthorTag';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1> Calculadora de Índice de Massa Corporal</h1>\n        <p>Introduza no formulário abaixo os valores de altura e peso para obter o seu IMC:</p>\n        <ImcCalculator />\n        </header>\n         <Author/> \n    </div>\n\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}